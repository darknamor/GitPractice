git init inicializa git en el directorio
git add "algo"s
git commit -m "version"
git add .
git status
git log "la cosa con cambios"
git checkout --traer cambios de la master
git show -mostra cambios de version
git log  -mostrar historia de commit
git diff - comparar versiones del log
git reset "codigo del log" 
	--hard /volver en el tiempo
	--soft volvemos a la version anterior pero se mantiene en stage
touch nombre archivo -- crear archivo vacio
git log --stat ver cambio especificos en los archivos en bites
git checkout "string del commit" trae la version de ese commit
git rm --cached: Elimina los archivos del área de Staging y del próximo commit pero los mantiene en nuestro disco duro.
git rm --force: Elimina los archivos de Git y del disco duro. Git siempre guarda todo, por lo que podemos acceder al registro de la existencia de los archivos, de modo que podremos recuperarlos si es necesario (pero debemos usar comandos más avanzados).
git clone "url" - traer datos del repo
git push -subir cambios de los commit al repo
git fetch -traer cambios al repo local
git merge -traer datos al directorio local
git pull -es fecth+merge
git pull -es fecth+merge
git commit -am funciona con los archivos que se les hizo add 
git branch "nombre" -crea un banch de la rama actual
git checkout "nombre rama" - cambia rama
git merge - mezclar ramas
git rm --cached borra el add
git show ver los cambios de un archivo
salir del vi de GIT = ESC+SHIFT+ZZ
git log--oneline --graph ver ramas de forma grafica
git remote add origni "url del repositorio"
git remote
git remote -v
git push origin master subir todo al repositorio origin
git pull origin master --allow-unrelated-histories - mesclar hisotrias de los repos
git commit -am
pwd "donde estoy"
ls -al show all folders
eval $(ssh-agent -s) revisar si el servidor ssh esta corriendo
ssh-add -K ruta donde esta la llave privada
git remote set-url origin url-ssh-del-repositorio-en-github "Cambiar repo de hhtps a SSH"
git log --all --graph --decorate --oneline "Mostrar Historia de forma grafica"
git tag -a v0.1 -m "comentario" tag
git show-ref --tags
git push origin --tags subir tags
git tag -d "nombre de tag" borrar internamente el tag
git push origin :refs/tags/nombre-del-tag. "borrar tag del repositorio"
git show-branch --all "mostrar todas las ramas
gitk "levanta un software para las ramas
git branch "nombre de la branch" crea rama
git push "nombre de la branch" sube la branch al repo
git remote add upstream "urldel repo" -- para funcionar del proyecto master
git remote -v
git stash "genera un lugar temporal para cambiarme de rama sin subir los cambios"
git stash list "muestra lista de cambios en el stash"
git stash pop "volver al estado modificado"
git stash drop "borra el stash"
<git stash branch [rama]>  Lleva los cambios del stash a una nueva rama
git clean "comando para borrar no funciona por si solo"
git clean --dry-run "muestra los archivos que se van a borrar"
git clean -f "borra los archivos listados anteriormente"
git cherry-pick IDCommit. "Traer avances de una rama a master"
git commit --amend "remendar cambios de un comit anterior"
git reflog "MUESTRA TODO LO QUE PASA TOODO"
git reset --soft HashDelHEAD "hace un reset suave"
git reset --hard HashDelHEAD "Todo regresa a como era antes"
